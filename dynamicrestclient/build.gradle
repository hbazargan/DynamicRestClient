plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

final GROUP_ID = "ir.hamidbazargan"
final VERSION_NAME = "1.0.1"
final VERSION_CODE = 2

android {
    compileSdk 31

    defaultConfig {
        minSdk 17
        targetSdk 31
        versionCode VERSION_CODE
        versionName VERSION_NAME
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    api 'com.squareup.retrofit2:retrofit:2.9.0'
    api 'com.google.code.gson:gson:2.8.9'
    api 'com.squareup.okhttp3:okhttp:parent-4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    implementation('com.github.ihsanbal:LoggingInterceptor:3.1.0') {
        exclude group: 'org.json', module: 'json'
    }
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId = GROUP_ID
            artifactId = project.getName()
            version = VERSION_NAME
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            pom.withXml {
                // for dependencies and exclusions
                def dependenciesNode = asNode().appendNode('dependencies')
                def configurationNames = ["implementation", "api", "runtimeOnly"]
                configurationNames.each { confName ->
                    configurations[confName].allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        if (it.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            it.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group)
                                exclusionNode.appendNode('artifactId', rule.module)
                            }
                        }
                    }
                }
            }
        }
    }
}

project.afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
            }
        }
    }
}